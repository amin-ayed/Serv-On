<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:sec="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="
     http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<!-- Enable method level Spring Security by annotations -->
	<sec:global-method-security pre-post-annotations="enabled" />
	<sec:http auto-config="true" use-expressions="true">
		<sec:session-management session-fixation-protection="none" />
		<sec:custom-filter ref="sessionManagementFilter" before="SESSION_MANAGEMENT_FILTER" />
		<sec:custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrencyFilter" />

		<sec:access-denied-handler error-page="/pages/unsecure/error.xhtml" />
		<!-- Page level Spring Security : Enable Primefaces -->
		<sec:intercept-url pattern="/javax.faces.resource/**" access="permitAll" />
		<sec:intercept-url pattern="/css/**" access="permitAll" />
		<sec:intercept-url pattern="/images/**" access="permitAll" />
		<sec:intercept-url pattern="/js/**" access="permitAll" />
		<!-- WSDSLS -->
		<sec:intercept-url pattern="/ws/**" access="permitAll" />

		<sec:intercept-url pattern="/pages/secure/**" access="isAuthenticated()" />

		
		

		<!-- Define logout properties for Spring Security -->
		<sec:logout invalidate-session="true" delete-cookies="jsessionid" logout-success-url="/" />

		<sec:session-management session-authentication-strategy-ref="sessionAuthenticationStrategy" />

	</sec:http>

	<!-- Set userService class as the authentication Manager for Spring Security -->
	<sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider user-service-ref="userDao">
			<sec:password-encoder hash="sha" ref="encoder">
				<sec:salt-source user-property="username" />
			</sec:password-encoder>
		</sec:authentication-provider>
	</sec:authentication-manager>


	<!-- Inject authentication Manager to our LoginBean -->

	<beans:bean class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" id="encoder">
		<beans:constructor-arg value="256" />
	</beans:bean>

	<!-- session management filter -->
	<beans:bean id="sessionManagementFilter" class="org.springframework.security.web.session.SessionManagementFilter">
		<beans:constructor-arg name="securityContextRepository" ref="httpSessionSecurityContextRepository" />
		<beans:property name="invalidSessionStrategy" ref="invalidSessionDetector" />
	</beans:bean>

	<beans:bean id="invalidSessionDetector" class="org.bd.easyServ.web.common.security.session.InvalidSessionDetector">
		<beans:constructor-arg name="invalidSessionUrl" value="/pages/unsecure/login.xhtml?sessionexpired=1" />
	</beans:bean>

	<beans:bean id="httpSessionSecurityContextRepository" class="org.springframework.security.web.context.HttpSessionSecurityContextRepository" />

	<!-- Concurrency Control Filter -->
	<beans:bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<beans:property name="sessionRegistry" ref="sessionRegistry" />
		<beans:property name="expiredUrl" value="/pages/unsecure/login.xhtml?sessionexpired=2" />
	</beans:bean>

	<beans:bean id="sessionAuthenticationStrategy" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
		<beans:constructor-arg name="sessionRegistry" ref="sessionRegistry" />
		<beans:property name="maximumSessions" value="1" />
		<beans:property name="exceptionIfMaximumExceeded" value="true" />
	</beans:bean>

	<beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />

</beans:beans>

